<?xml version="1.0" encoding="UTF-8"?>

<!-- The Hypersonic embedded database JCA connection factory config -->

<!-- See http://www.jboss.org/community/wiki/Multiple1PC for information about local-tx-datasource -->
<!-- $Id: hsqldb-ds.xml 88948 2009-05-15 14:09:08Z jesper.pedersen $ -->

<datasources>
    <local-tx-datasource>
        <connection-property name="char.encoding">UTF-8</connection-property>
        <connection-property name="skuska">tralala</connection-property>
        <!-- The jndi name of the DataSource, it is prefixed with java:/ -->
        <!-- Datasources are not available outside the virtual machine -->
        <jndi-name>DefaultDS5</jndi-name>
        <test fu="lol">test1</test>
        <test fu="2">test2</test>
        <test fu="3">test3</test>


        <!-- For server mode db, allowing other processes to use hsqldb over tcp.
        This requires the org.jboss.jdbc.HypersonicDatabase mbean.
        <connection-url>jdbc:hsqldb:hsql://${jboss.bind.address}:1701</connection-url>
        -->
        <!-- For totally in-memory db, not saved when jboss stops.
        The org.jboss.jdbc.HypersonicDatabase mbean is required for proper db shutdown
        <connection-url>jdbc:hsqldb:.</connection-url>
        -->
        <!-- For in-process persistent db, saved when jboss stops.
        The org.jboss.jdbc.HypersonicDatabase mbean is required for proper db shutdown
        -->
        <connection-url>jdbc:hsqldb:${jboss.server.data.dir}${/}hypersonic${/}localDB</connection-url>

        <!-- The driver class -->
        <driver-class>org.hsqldb.jdbcDriver</driver-class>

        <!-- The login and password -->
        <user-name>sa</user-name>

        <!--example of how to specify class that determines if exception means connection should be destroyed-->
        <!--exception-sorter-class-name>org.jboss.resource.adapter.jdbc.vendor.DummyExceptionSorter</exception-sorter-class-name-->

        <!-- this will be run before a managed connection is removed from the pool for use by a client-->
        <!--<check-valid-connection-sql>select * from something</check-valid-connection-sql> -->

        <!-- The minimum connections in a pool/sub-pool. Pools are lazily constructed on first use -->
        <min-pool-size>5</min-pool-size>

        <!-- The maximum connections in a pool/sub-pool -->
        <max-pool-size>20</max-pool-size>

        <!-- The time before an unused connection is destroyed -->
        <!-- NOTE: This is the check period. It will be destroyed somewhere between 1x and 2x this timeout after last use -->
        <!-- TEMPORARY FIX! - Disable idle connection removal, HSQLDB has a problem with not reaping threads on closed connections -->
        <idle-timeout-minutes>0</idle-timeout-minutes>

        <!-- sql to call when connection is created
          <new-connection-sql>some arbitrary sql</new-connection-sql>
        -->

        <!-- sql to call on an existing pooled connection when it is obtained from pool
           <check-valid-connection-sql>some arbitrary sql</check-valid-connection-sql>
        -->

        <!-- example of how to specify a class that determines a connection is valid before it is handed out from the pool
           <valid-connection-checker-class-name>org.jboss.resource.adapter.jdbc.vendor.DummyValidConnectionChecker</valid-connection-checker-class-name>
        -->

        <!-- Whether to check all statements are closed when the connection is returned to the pool,
this is a debugging feature that should be turned off in production -->
        <track-statements/>

        <!-- Use the getConnection(user, pw) for logins
          <application-managed-security/>
        -->

        <!-- Use the security domain defined in conf/login-config.xml -->
        <security-domain>HsqlDbRealm</security-domain>

        <!-- Use the security domain defined in conf/login-config.xml or the
             getConnection(user, pw) for logins. The security domain takes precedence.
          <security-domain-and-application>HsqlDbRealm</security-domain-and-application>
        -->

        <!-- HSQL DB benefits from prepared statement caching -->
        <prepared-statement-cache-size>32</prepared-statement-cache-size>

        <!-- corresponding type-mapping in the standardjbosscmp-jdbc.xml (optional) -->
        <metadata>
            <type-mapping>Hypersonic SQL</type-mapping>
        </metadata>

        <!-- When using in-process (standalone) mode -->
        <depends>jboss:service=Hypersonic,database=localDB</depends>
        <!-- Uncomment when using hsqldb in server mode
        <depends>jboss:service=Hypersonic</depends>
        -->
    </local-tx-datasource>
    <local-tx-datasource>
        <jndi-name>PostgresDS6</jndi-name>
        <connection-url>jdbc:postgresql://[servername]:[port]/[database name]</connection-url>
        <driver-class>org.postgresql.Driver</driver-class>
        <user-name>x</user-name>
        <password>y</password>
        <!-- sql to call when connection is created.  Can be anything, select 1 is valid for PostgreSQL
        <new-connection-sql>select 1</new-connection-sql>
        -->

        <!-- sql to call on an existing pooled connection when it is obtained from pool.  Can be anything, select 1 is valid for PostgreSQL
        <check-valid-connection-sql>select 1</check-valid-connection-sql>
        -->

        <!-- corresponding type-mapping in the standardjbosscmp-jdbc.xml (optional) -->
        <metadata>
            <type-mapping>PostgreSQL 7.2</type-mapping>
        </metadata>
    </local-tx-datasource>
    <xa-datasource>

    <jndi-name>GenericXADS</jndi-name>


    <use-java-context/>


    <track-connection-by-tx/>0..1
    <interleaving/> 0..1

    <xa-datasource-class>[fully qualified name of class implementing javax.sql.XADataSource goes here]</xa-datasource-class>

    <xa-datasource-property name="SomeProperty">SomePropertyValue</xa-datasource-property>
    <xa-datasource-property name="SomeOtherProperty">SomeOtherValue</xa-datasource-property>


    <url-property/>

    <url-delimeter/>


    <url-selector-strategy-class-name/>


    <isSameRM-override-value/>



    <user-name>x</user-name>
    <password>y</password>


    <transaction-isolation>TRANSACTION_SERIALIZABLE</transaction-isolation>

    <!--pooling parameters-->
    <min-pool-size>5</min-pool-size>
    <max-pool-size>100</max-pool-size>

    <blocking-timeout-millis>5000</blocking-timeout-millis>
    <idle-timeout-minutes>15</idle-timeout-minutes>


    <!-- sql to call when connection is created-->
    <new-connection-sql>some arbitrary sql</new-connection-sql>


    <!-- sql to call on an existing pooled connection when it is obtained from pool -->
    <check-valid-connection-sql>some arbitrary sql</check-valid-connection-sql>


    <!-- pooling criteria.  USE AT MOST ONE-->
    <!--  If you don't use JAAS login modules or explicit login
          getConnection(usr,pw) but rely on user/pw specified above,
          don't specify anything here -->

    <!-- If you supply the usr/pw from a JAAS login module -->
    <security-domain/>


    <!-- if your app supplies the usr/pw explicitly getConnection(usr, pw) -->
    <application-managed-security/>


    <xa-resource-timeout/>

</xa-datasource>
    <local-tx-datasource>
        <connection-property name="char.encoding">UTF-8</connection-property>
        <connection-property name="skuska">tralala</connection-property>
        <!-- The jndi name of the DataSource, it is prefixed with java:/ -->
        <!-- Datasources are not available outside the virtual machine -->
        <jndi-name>DefaultDS</jndi-name>
        <test fu="lol">test1</test>
        <test fu="2">test2</test>
        <test fu="3">test3</test>


        <!-- For server mode db, allowing other processes to use hsqldb over tcp.
        This requires the org.jboss.jdbc.HypersonicDatabase mbean.
        <connection-url>jdbc:hsqldb:hsql://${jboss.bind.address}:1701</connection-url>
        -->
        <!-- For totally in-memory db, not saved when jboss stops.
        The org.jboss.jdbc.HypersonicDatabase mbean is required for proper db shutdown
        <connection-url>jdbc:hsqldb:.</connection-url>
        -->
        <!-- For in-process persistent db, saved when jboss stops.
        The org.jboss.jdbc.HypersonicDatabase mbean is required for proper db shutdown
        -->
        <connection-url>jdbc:hsqldb:${jboss.server.data.dir}${/}hypersonic${/}localDB</connection-url>

        <!-- The driver class -->
        <driver-class>org.hsqldb.jdbcDriver</driver-class>

        <!-- The login and password -->
        <user-name>sa</user-name>


        <!--example of how to specify class that determines if exception means connection should be destroyed-->
        <!--exception-sorter-class-name>org.jboss.resource.adapter.jdbc.vendor.DummyExceptionSorter</exception-sorter-class-name-->

        <!-- this will be run before a managed connection is removed from the pool for use by a client-->
        <!--<check-valid-connection-sql>select * from something</check-valid-connection-sql> -->

        <!-- The minimum connections in a pool/sub-pool. Pools are lazily constructed on first use -->
        <min-pool-size>5</min-pool-size>

        <!-- The maximum connections in a pool/sub-pool -->
        <max-pool-size>20</max-pool-size>

        <!-- The time before an unused connection is destroyed -->
        <!-- NOTE: This is the check period. It will be destroyed somewhere between 1x and 2x this timeout after last use -->
        <!-- TEMPORARY FIX! - Disable idle connection removal, HSQLDB has a problem with not reaping threads on closed connections -->
        <idle-timeout-minutes>0</idle-timeout-minutes>

        <!-- sql to call when connection is created
          <new-connection-sql>some arbitrary sql</new-connection-sql>
        -->

        <!-- sql to call on an existing pooled connection when it is obtained from pool
           <check-valid-connection-sql>some arbitrary sql</check-valid-connection-sql>
        -->

        <!-- example of how to specify a class that determines a connection is valid before it is handed out from the pool
           <valid-connection-checker-class-name>org.jboss.resource.adapter.jdbc.vendor.DummyValidConnectionChecker</valid-connection-checker-class-name>
        -->

        <!-- Whether to check all statements are closed when the connection is returned to the pool,
this is a debugging feature that should be turned off in production -->
        <track-statements/>

        <!-- Use the getConnection(user, pw) for logins
          <application-managed-security/>
        -->

        <!-- Use the security domain defined in conf/login-config.xml -->
        <security-domain>HsqlDbRealm</security-domain>

        <!-- Use the security domain defined in conf/login-config.xml or the
             getConnection(user, pw) for logins. The security domain takes precedence.
          <security-domain-and-application>HsqlDbRealm</security-domain-and-application>
        -->

        <!-- HSQL DB benefits from prepared statement caching -->
        <prepared-statement-cache-size>32</prepared-statement-cache-size>

        <!-- corresponding type-mapping in the standardjbosscmp-jdbc.xml (optional) -->
        <metadata>
            <type-mapping>Hypersonic SQL</type-mapping>
        </metadata>

        <!-- When using in-process (standalone) mode -->
        <depends>jboss:service=Hypersonic,database=localDB</depends>
        <!-- Uncomment when using hsqldb in server mode
        <depends>jboss:service=Hypersonic</depends>
        -->
    </local-tx-datasource>





</datasources>